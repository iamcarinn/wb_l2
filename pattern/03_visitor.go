package main

/*
	Реализовать паттерн «посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Visitor_pattern
*/

/*
Паттерн "Посетитель" (Visitor) — это поведенческий паттерн, который позволяет добавлять новые операции к объектам, не изменяя их структуры.

Применимость:
- когда необходимо выполнять различные операции над объектами, не изменяя их код.
- когда часто добавляются новые действия, но структура объектов остается неизменной.

Плюсы:
- упрощает добавление новых операций без изменения классов.
- разделяет алгоритмы и структуру объектов.

Минусы:
- усложняет код из-за необходимости создания нового посетителя для каждой операции.
- может нарушить инкапсуляцию, если посетитель требует доступ к приватным данным объекта.

Пример:
1. Используется в компиляторах для обхода синтаксического дерева (AST).
2. Используется в системах отчетности, где разные посетители могут формировать отчеты на основе данных.
*/

import "fmt"

// Интерфейс посетителя, который определяет методы для каждого типа сотрудника
type Visitor interface {
	VisitDeveloper(*Developer)
	VisitManager(*Manager)
}

// Интерфейс сотрудника
type Employee interface {
	Accept(Visitor)
}

// Разработчик
type Developer struct {
	Name  string
	Lines int // Количество строк кода, написанных за месяц
}

// Метод Accept для разработчика
func (d *Developer) Accept(v Visitor) {
	v.VisitDeveloper(d)
}

// Менеджер
type Manager struct {
	Name     string
	Projects int // Количество проектов, которыми управляет
}

// Метод Accept для менеджера
func (m *Manager) Accept(v Visitor) {
	v.VisitManager(m)
}

// Конкретный посетитель для расчёта бонусов
type BonusCalculator struct{}

// Бонус для разработчика зависит от количества написанных строк кода
func (b *BonusCalculator) VisitDeveloper(d *Developer) {
	bonus := d.Lines / 1000 * 100 // 100 рублей за 1000 строк
	fmt.Printf("Разработчик %s получает бонус: %d рублей\n", d.Name, bonus)
}

// Бонус для менеджера зависит от количества проектов
func (b *BonusCalculator) VisitManager(m *Manager) {
	bonus := m.Projects * 500 // 500 рублей за проект
	fmt.Printf("Менеджер %s получает бонус: %d рублей\n", m.Name, bonus)
}

func main() {
	// Список сотрудников
	employees := []Employee{
		&Developer{Name: "Иван", Lines: 5000},
		&Manager{Name: "Анна", Projects: 3},
	}

	// Создаём посетителя для расчёта бонусов
	bonusCalculator := &BonusCalculator{}

	// Применяем посетителя ко всем сотрудникам
	for _, employee := range employees {
		employee.Accept(bonusCalculator)
	}
}
